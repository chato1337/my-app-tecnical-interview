{"version":3,"sources":["constants/index.ts","services/countryService.ts","services/customerService.ts","components/Form/Form.tsx","hooks/useForm.ts","components/PeopleList/PeopleList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CountriesApi","url","CustomersApi","add","get","CountryService","getCountries","a","axios","res","CustomerService","addNewCustomer","data","newUser","username","name","email","password","role","country","post","then","console","log","catch","err","getCustomers","Form","setToggleReload","toggleReload","useState","countryList","setCountryList","initState","form","setForm","handleChange","target","value","useForm","active","getData","useEffect","handleSubmit","e","preventDefault","className","htmlFor","onChange","type","map","onClick","PeopleList","props","customers","customer","_id","App","setCustomers","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9669bd9f.chunk.js","sourcesContent":["export class CountriesApi {\n    static url:string = 'https://restcountries.eu/rest/v2/all'\n}\n\nexport class CustomersApi{\n    static url:string = 'http://ec2-3-128-203-154.us-east-2.compute.amazonaws.com:3001/'\n\n    static add:string = CustomersApi.url+'signup'\n    \n    static get:string = CustomersApi.url+'customers'\n\n}","import axios from \"axios\"\nimport { CountriesApi } from \"../constants\"\n\n\nexport class CountryService {\n    static getCountries = async () => {\n        const res = await axios.get(CountriesApi.url)\n        return res\n    }\n}","import axios from \"axios\"\nimport { CustomersApi } from \"../constants\"\n\ntype Customer = {\n    name: string,\n    country: string\n}\n\nexport class CustomerService {\n    static addNewCustomer = async (data:Customer) => {\n        const newUser = {\n            username: data.name,\n            email: 'test@tst.me',\n            password: 'test123',\n            role: 'normal',\n            country: data.country\n        }\n        return await axios.post(CustomersApi.add, newUser)\n            .then(res => console.log('saved: ', data))\n            .catch(err => console.log(err))\n    }\n\n    static getCustomers = async () => {\n        const res = await axios.get(CustomersApi.get)\n        return res.data\n    }\n}","import { ChangeEvent, useEffect, useState } from 'react'\nimport { CountryService } from '../../services/countryService'\nimport { SelectSearchOption } from 'react-select-search';\nimport './formStyles.scss'\nimport { useForm } from '../../hooks/useForm';\nimport { CustomerService } from '../../services/customerService';\n\ninterface formData {\n    name: string,\n    country: string,\n    active: boolean\n}\n\ntype Props = {\n    setToggleReload: React.Dispatch<React.SetStateAction<any>>;\n    toggleReload: boolean\n};\n\nconst Form: React.FC<Props> = ({ setToggleReload, toggleReload }) => {\n    const [countryList, setCountryList] = useState<SelectSearchOption[]>([])\n\n    const {form, handleChange} = useForm<formData>({\n        name: '',\n        country: '',\n        active: true\n    })\n\n    const getData = async () => {\n        const res = await CountryService.getCountries()\n        setCountryList(res.data)\n    }\n\n    useEffect(() => {\n        getData()\n    }, [])\n\n    const handleSubmit = async (e: ChangeEvent<any>) => {\n        e.preventDefault()\n        console.log(form)\n\n        await CustomerService.addNewCustomer(form)\n        setToggleReload(!toggleReload)\n    }\n\n    return (\n        <div className=\"form-container\">\n            <form>\n                <label htmlFor=\"\">Name:</label>\n                <input onChange={handleChange} type=\"text\" name=\"name\" />\n                <label htmlFor=\"\">Country:</label>\n                {/* <SelectSearch options={countryList} placeholder=\"Choose your country\" /> */}\n                <select name=\"country\" onChange={handleChange}>\n                    <option value=\"\">select</option>\n                    {\n                        countryList.map(country => (\n                            <option\n                                key={country.name}\n                                value={country.name}\n                            >\n                                {country.name}\n                            </option>\n                        ))\n                    }\n                </select>\n                <button onClick={(e) => handleSubmit(e)}>Add person</button>\n            </form>\n        </div>\n    )\n}\n\nexport default Form\n","import { ChangeEvent, useState } from \"react\"\n\nexport const useForm = <T extends Object>(initState: T) => {\n    const [form, setForm] = useState(initState)\n\n    const handleChange = ({target}: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n        const {name, value} = target\n        console.log(name, value)\n        setForm({\n            ...form,\n            [name]: value\n        })\n    }\n\n    return {\n        form,\n        handleChange,\n        ...form\n    }\n}","import { FC } from 'react'\n\ninterface Customer {\n    _id: number,\n    username: string,\n    country?: string,\n    active?: boolean\n}\n\ninterface Customers {\n    customers: Customer[]\n}\n\nconst PeopleList: FC<Customers> = (props): JSX.Element => {\n    const {customers} = props\n\n    return (\n        <div>\n            <ul>\n                {\n                    customers.map(customer => \n                        <li key={customer._id}>\n                            {customer.username} - {customer.country || 'colombia'}\n                        </li>\n                    )\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default PeopleList\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form';\nimport PeopleList from './components/PeopleList/PeopleList';\nimport { CustomerService } from './services/customerService';\ninterface Customer {\n  _id: number,\n  username: string,\n  country?: string,\n  active?: boolean\n}\n\n\nfunction App() {\n\n  const [customers, setCustomers] = useState<Customer[]>([])\n  const [toggleReload, setToggleReload] = useState(false)\n\n  const getCustomers = async () => {\n      const data = await CustomerService.getCustomers()\n      setCustomers(data)\n  }\n\n  useEffect(() => {\n      getCustomers()\n      console.log('entro aca')\n  }, [toggleReload])\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tech prof</h1>\n        <Form setToggleReload={setToggleReload} toggleReload={toggleReload} />\n        <PeopleList customers={customers} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}